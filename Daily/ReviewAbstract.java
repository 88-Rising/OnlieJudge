package Daily;

public class ReviewAbstract {
    /*
    * 1.面向对象的特点有哪些？
      抽象，继承，封装，多态

      2.接口和抽象类有什么联系和区别？
   抽象类：
       一个类中有抽象方法，这个类就变成了抽象类
       抽象类中class的前边必须有abstract修饰符
       抽象类中也可以有普通方法，也可以由抽象方法，抽象方法可以是0个 也可以十多个
      子类继承父类，必须重写全部的抽象方法，除非这个类也变成了抽象类
  接口：
      表面上看，接口是一种特殊的抽象类，但是类是类，接口是接口，并非并列关系
      接口中的所有方法必须是抽象的 1.8之后允许定义非抽象方法
      接口中方法定义默认为 public abstract 类型，成员变量默认为 public static final类型

  抽象类和普通类的区别是：
   包含抽象方法的类称为抽象类但并不意味着，但并不意味着抽象类中只能含有抽象方法，和普通类一样，同样可以拥有成员变量和普通成员的方法，抽象类和普通类的区别如下：
   抽象方法的访问修饰符必须为public和protected
   抽象类不可以被实例化
   如果一个类继承了抽象类，则子类必须实现父类的抽象方法，如果子类没有实现父类的抽象方法，则子类必须也是一个抽象类。

  抽象类和接口的区别如下：
     一个类只能继承一个抽象类，但是一个类可以实现多个接口
     抽象类中可以有构造方法，接口中不能有构造方法
     抽象类中可以有成员变量，但是接口不可以有成员变量（被final修饰成了常量）
     抽象类中可以包含普通方法，但是接口中必须全是抽象方法 1.8之后允许接口定义非抽象方法
     抽象类中抽象方法的访问类型可以是public , abstract,但是接口中抽象方法访问类型只能是public 并且默认为public abstract
     抽象类中的成员变量可以是各种类型，而接口中的成员变量这能是public static final
    * */
}
